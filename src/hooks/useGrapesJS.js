import { useEffect, useState, useCallback } from 'react';
import grapesjs from 'grapesjs';
import 'grapesjs/dist/css/grapes.min.css';
import 'grapesjs-preset-webpage';
import 'grapesjs-plugin-forms';

// Â∞éÂÖ•Á∑®ËºØÂô®ÁµÑ‰ª∂
import React from 'react';
import ReactDOM from 'react-dom/client'; // ‰ΩøÁî®Êñ∞ÁâàÊú¨ÁöÑ ReactDOM
import {
  TextInputEditor,
  TextAreaEditor,
  SelectEditor,
  RadioEditor,
  CheckboxEditor,
  ButtonEditor,
  LabelEditor
} from '../components/EFormDesigner/editors';

// ÂãïÊÖãËºâÂÖ•Ë™ûË®ÄË≥áÊ∫ê
const loadLanguageResources = async (language) => {
  try {
    let resources;
    switch (language) {
      case 'zh-SC':
        resources = await import('../locales/zh-SC.js');
        return resources.default;
      case 'zh-TC':
        resources = await import('../locales/zh-TC.js');
        return resources.default;
      case 'en':
        resources = await import('../locales/en.js');
        return resources.default;
      default:
        resources = await import('../locales/zh-TC.js');
        return resources.default;
    }
  } catch (error) {
    console.error('ËºâÂÖ•Ë™ûË®ÄË≥áÊ∫êÂ§±Êïó:', error);
    // ËøîÂõûÈªòË™çÁöÑÁπÅÈ´î‰∏≠Êñá
    return {
      eformDesigner: {
        welcomeMessage: 'Ê≠°Ëøé‰ΩøÁî®Ë°®ÂñÆË®≠Ë®àÂô®',
        welcomeDescription: 'Ë´ãÂæûÂ∑¶ÂÅ¥Èù¢ÊùøÊãñÊãΩÁµÑ‰ª∂Âà∞Ê≠§ËôïÈñãÂßãË®≠Ë®àÊÇ®ÁöÑË°®ÂñÆ„ÄÇ',
        exampleInput: 'Á§∫‰æãËº∏ÂÖ•Ê°Ü',
        exampleInputPlaceholder: 'Ë´ãËº∏ÂÖ•...'
      }
    };
  }
};

const useGrapesJS = (containerRef, initialHtmlContent, onEditorReady) => {
  const [editor, setEditor] = useState(null);
  const [isReady, setIsReady] = useState(false);
  const [languageResources, setLanguageResources] = useState(null);

  console.log('üöÄ useGrapesJS: Hook ÂàùÂßãÂåñÔºåÂèÉÊï∏:', {
    hasContainerRef: !!containerRef,
    hasInitialHtmlContent: !!initialHtmlContent,
    hasOnEditorReady: !!onEditorReady,
    onEditorReadyType: onEditorReady ? typeof onEditorReady : 'null'
  });

  useEffect(() => {
    console.log('üîç useGrapesJS: useEffect Ëß∏ÁôºÔºåÊ¢ù‰ª∂Ê™¢Êü•:', {
      hasContainerRef: !!containerRef.current,
      hasEditor: !!editor,
      containerRefCurrent: containerRef.current
    });
    
    if (!containerRef.current || editor) {
      console.log('‚ö†Ô∏è useGrapesJS: Ê¢ù‰ª∂‰∏çÊªøË∂≥ÔºåÈÄÄÂá∫ÂàùÂßãÂåñ');
      return;
    }

    console.log('üöÄ ÈñãÂßãÂàùÂßãÂåñ GrapesJS Á∑®ËºØÂô®...');
    
    // Áç≤ÂèñÁî®Êà∂Ë™ûË®ÄË®≠ÁΩÆ
    const userLanguage = localStorage.getItem('language') || 'zh-TC';
    console.log('üåê Áî®Êà∂Ë™ûË®Ä:', userLanguage);
    
    // ËºâÂÖ•Ë™ûË®ÄË≥áÊ∫ê‰∏¶ÂàùÂßãÂåñÁ∑®ËºØÂô®
    loadLanguageResources(userLanguage).then(resources => {
      console.log('‚úÖ Ë™ûË®ÄË≥áÊ∫êËºâÂÖ•ÊàêÂäü:', resources);
      setLanguageResources(resources);
      
      try {
        console.log('üîß ÈñãÂßãÂâµÂª∫ GrapesJS ÂØ¶‰æã...');
        const grapesEditor = grapesjs.init({
          container: containerRef.current,
          height: '100%',
          width: 'auto',
          storageManager: false,
          plugins: ['gjs-preset-webpage'],
          pluginsOpts: {
            'gjs-preset-webpage': {}
          },
          canvas: {
            styles: [
              'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css',
            ],
            scripts: [
              'https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js',
            ],
          },
          // Ë®≠ÂÇôÁÆ°ÁêÜÂô®ÈÖçÁΩÆ
          deviceManager: {
            devices: [
              {
                name: resources.eformDesigner?.grapesJs?.desktop || 'Desktop',
                width: '',
              },
              {
                name: resources.eformDesigner?.grapesJs?.tablet || 'Tablet',
                width: '768px',
                widthMedia: '992px',
              },
              {
                name: resources.eformDesigner?.grapesJs?.mobileLandscape || 'Mobile Landscape',
                width: '568px',
                widthMedia: '768px',
              },
              {
                name: resources.eformDesigner?.grapesJs?.mobilePortrait || 'Mobile Portrait',
                width: '320px',
                widthMedia: '480px',
              },
            ],
          },
          // Ê®£ÂºèÁÆ°ÁêÜÂô®ÈÖçÁΩÆ
          styleManager: {
            sectors: [
              {
                name: resources.eformDesigner?.grapesJs?.general || 'General',
                open: false,
                buildProps: [
                  'display',
                  'float',
                  'position',
                  'top',
                  'right',
                  'left',
                  'bottom',
                ],
                properties: [
                  {
                    property: 'display',
                    type: 'select',
                    defaults: 'block',
                    options: [
                      { value: 'block', name: resources.eformDesigner?.grapesJs?.block || 'Block' },
                      { value: 'inline', name: resources.eformDesigner?.grapesJs?.inline || 'Inline' },
                      { value: 'inline-block', name: resources.eformDesigner?.grapesJs?.inlineBlock || 'Inline Block' },
                      { value: 'flex', name: resources.eformDesigner?.grapesJs?.flex || 'Flex' },
                      { value: 'grid', name: resources.eformDesigner?.grapesJs?.grid || 'Grid' },
                    ],
                  },
                  {
                    property: 'float',
                    type: 'select',
                    defaults: 'none',
                    options: [
                      { value: 'none', name: resources.eformDesigner?.grapesJs?.none || 'None' },
                      { value: 'left', name: resources.eformDesigner?.grapesJs?.left || 'Left' },
                      { value: 'right', name: resources.eformDesigner?.grapesJs?.right || 'Right' },
                    ],
                  },
                  {
                    property: 'position',
                    type: 'select',
                    defaults: 'static',
                    options: [
                      { value: 'static', name: resources.eformDesigner?.grapesJs?.static || 'Static' },
                      { value: 'relative', name: resources.eformDesigner?.grapesJs?.relative || 'Relative' },
                      { value: 'absolute', name: resources.eformDesigner?.grapesJs?.absolute || 'Absolute' },
                      { value: 'fixed', name: resources.eformDesigner?.grapesJs?.fixed || 'Fixed' },
                    ],
                  },
                  {
                    property: 'top',
                    type: 'integer',
                    defaults: 'auto',
                    units: ['px', '%', 'em', 'rem'],
                  },
                  {
                    property: 'right',
                    type: 'integer',
                    defaults: 'auto',
                    units: ['px', '%', 'em', 'rem'],
                  },
                  {
                    property: 'left',
                    type: 'integer',
                    defaults: 'auto',
                    units: ['px', '%', 'em', 'rem'],
                  },
                  {
                    property: 'bottom',
                    type: 'integer',
                    defaults: 'auto',
                    units: ['px', '%', 'em', 'rem'],
                  },
                ],
              },
            ],
          },
          components: initialHtmlContent.trim() ? initialHtmlContent : `
            <div class="container">
              <div class="row">
                <div class="col-md-12">
                  <h1>${resources.eformDesigner?.welcomeMessage || 'Ê≠°Ëøé‰ΩøÁî®Ë°®ÂñÆË®≠Ë®àÂô®'}</h1>
                  <p>${resources.eformDesigner?.welcomeDescription || 'Ë´ãÂæûÂ∑¶ÂÅ¥Èù¢ÊùøÊãñÊãΩÁµÑ‰ª∂Âà∞Ê≠§ËôïÈñãÂßãË®≠Ë®àÊÇ®ÁöÑË°®ÂñÆ„ÄÇ'}</p>
                  <div class="form-group">
                    <label for="exampleInput">${resources.eformDesigner?.exampleInput || 'Á§∫‰æãËº∏ÂÖ•Ê°Ü'}</label>
                    <input type="text" class="form-control" id="exampleInput" placeholder="${resources.eformDesigner?.exampleInputPlaceholder || 'Ë´ãËº∏ÂÖ•...'}">
                  </div>
                </div>
              </div>
            </div>
          `,
          style: `
            body { 
              font-family: Arial, sans-serif; 
              margin: 0; 
              padding: 20px; 
              background-color: #f5f5f5; 
            }
            .container { 
              max-width: 800px; 
              margin: 0 auto; 
              background: white; 
              padding: 20px; 
              border-radius: 8px; 
              box-shadow: 0 2px 10px rgba(0,0,0,0.1); 
            }
            
            /* Light Theme Ëá™ÂÆöÁæ©Ê®£Âºè */
            .gjs-pn-views-container {
              background-color: #f8f9fa !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-pn-panel {
              background-color: #ffffff !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-pn-views {
              background-color: #f8f9fa !important;
            }
            
            .gjs-pn-btn {
              background-color: #ffffff !important;
              color: #495057 !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-pn-btn:hover {
              background-color: #e9ecef !important;
              color: #212529 !important;
            }
            
            .gjs-pn-btn.gjs-pn-active {
              background-color: #007bff !important;
              color: #ffffff !important;
            }
            
            .gjs-cv-canvas {
              background-color: #ffffff !important;
            }
            
            .gjs-block {
              background-color: #ffffff !important;
              border-color: #dee2e6 !important;
              color: #495057 !important;
            }
            
            .gjs-block:hover {
              background-color: #e9ecef !important;
            }
            
            .gjs-block-category {
              background-color: #f8f9fa !important;
              color: #495057 !important;
            }
            
            .gjs-layer-title {
              background-color: #ffffff !important;
              color: #495057 !important;
            }
            
            .gjs-layer-vis {
              background-color: #ffffff !important;
              color: #495057 !important;
            }
            
            .gjs-layer-caret {
              color: #495057 !important;
            }
            
            .gjs-property {
              background-color: #ffffff !important;
              color: #495057 !important;
            }
            
            .gjs-property input {
              background-color: #ffffff !important;
              color: #495057 !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-property select {
              background-color: #ffffff !important;
              color: #495057 !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-toolbar {
              background-color: #ffffff !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-toolbar-item {
              background-color: #ffffff !important;
              color: #495057 !important;
              border-color: #dee2e6 !important;
            }
            
            .gjs-toolbar-item:hover {
              background-color: #e9ecef !important;
            }
            
            .gjs-toolbar-item.gjs-active {
              background-color: #007bff !important;
              color: #ffffff !important;
            }
            
            /* input Âíå textarea ÁöÑÊ®£Âºè */
            .gjs-cv-canvas input,
            .gjs-cv-canvas textarea {
              background-color: #f8f9fa !important;
              color: #6c757d !important;
              border: 1px solid #dee2e6 !important;
              padding: 8px !important;
              font-size: 14px !important;
              line-height: 1.4 !important;
              opacity: 0.8 !important;
              cursor: text !important;
            }
            
            .gjs-cv-canvas input:hover,
            .gjs-cv-canvas textarea:hover {
              background-color: #e9ecef !important;
              border-color: #adb5bd !important;
            }
            
            /* Áï∂ÁµÑ‰ª∂Ë¢´ÈÅ∏‰∏≠ÊôÇÔºåÈ°ØÁ§∫ÊèêÁ§∫Ê®£Âºè */
            .gjs-selected input,
            .gjs-selected textarea {
              border: 2px solid #007bff !important;
              background-color: #f0f8ff !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÊ†ºÂºèÊèêÁ§∫ */
            .gjs-cv-canvas input[type="date"] {
              position: relative;
            }
            
            .gjs-cv-canvas input[type="date"]::before {
              content: "üìÖ Ê†ºÂºè: " attr(data-date-format);
              position: absolute;
              top: -25px;
              left: 0;
              background: rgba(0, 123, 255, 0.9);
              color: white;
              padding: 3px 8px;
              border-radius: 4px;
              font-size: 11px;
              white-space: nowrap;
              pointer-events: none;
              z-index: 1000;
              font-weight: 500;
              box-shadow: 0 2px 4px rgba(0,0,0,0.2);
              animation: fadeIn 0.3s ease-in-out;
              opacity: 0.9;
              transition: opacity 0.2s ease;
            }
            
            .gjs-cv-canvas input[type="date"]:hover::before {
              opacity: 1;
            }
            
            @keyframes fadeIn {
              from { opacity: 0; transform: translateY(-5px); }
              to { opacity: 0.9; transform: translateY(0); }
            }
            
            /* Áï∂Êó•ÊúüËº∏ÂÖ•Ê°ÜË¢´ÈÅ∏‰∏≠ÊôÇÔºåÈ°ØÁ§∫Êõ¥Ë©≥Á¥∞ÁöÑÊ†ºÂºè‰ø°ÊÅØ */
            .gjs-selected input[type="date"]::after {
              content: "üìÖ Áï∂ÂâçÊ†ºÂºè: " attr(data-date-format);
              position: absolute;
              top: -45px;
              left: 0;
              background: rgba(0, 123, 255, 1);
              color: white;
              padding: 6px 10px;
              border-radius: 6px;
              font-size: 12px;
              white-space: nowrap;
              pointer-events: none;
              z-index: 1001;
              font-weight: bold;
              box-shadow: 0 4px 8px rgba(0,0,0,0.3);
              border: 2px solid rgba(255,255,255,0.3);
              animation: slideIn 0.3s ease-in-out;
              opacity: 1;
              transition: all 0.2s ease;
            }
            
            .gjs-selected input[type="date"]:hover::after {
              transform: translateY(-2px) scale(1.05);
              box-shadow: 0 6px 12px rgba(0,0,0,0.4);
            }
            
            @keyframes slideIn {
              from { opacity: 0; transform: translateY(-10px); }
              to { opacity: 1; transform: translateY(0); }
            }
            
            /* Á¢∫‰øùÂ∑•ÂÖ∑Ê¨ÑÂèØ‰ª•ÈªûÊìä */
            .gjs-toolbar {
              pointer-events: auto !important;
              z-index: 1001 !important;
            }
            
            .gjs-toolbar-item {
              pointer-events: auto !important;
              cursor: pointer !important;
              z-index: 1002 !important;
            }
            
            /* Á¢∫‰øùÈÅ∏‰∏≠ÁöÑÁµÑ‰ª∂ÂÆπÂô®ÂèØ‰ª•Êé•Êî∂ÈªûÊìä‰∫ã‰ª∂ */
            .gjs-selected {
              pointer-events: auto !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÈ°çÂ§ñÊ®£Âºè */
            .gjs-cv-canvas input[type="date"] {
              border: 2px solid #e8f4fd !important;
              background-color: #f8fbff !important;
              color: #1890ff !important;
              font-weight: 500 !important;
              position: relative !important;
              min-height: 32px !important;
              transition: all 0.2s ease !important;
              cursor: pointer !important;
            }
            
            .gjs-cv-canvas input[type="date"]:hover {
              border-color: #1890ff !important;
              background-color: #f0f8ff !important;
              transform: translateY(-1px) !important;
              box-shadow: 0 2px 8px rgba(24, 144, 255, 0.15) !important;
            }
            
            .gjs-selected input[type="date"] {
              border-color: #1890ff !important;
              background-color: #e6f7ff !important;
              box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2) !important;
              transform: scale(1.02) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂúñÊ®ôÊ®£Âºè */
            .gjs-cv-canvas input[type="date"]::-webkit-calendar-picker-indicator {
              background-color: #1890ff !important;
              border-radius: 3px !important;
              padding: 2px !important;
              cursor: pointer !important;
              transition: all 0.2s ease !important;
              filter: drop-shadow(0 1px 2px rgba(0,0,0,0.1)) !important;
            }
            
            .gjs-cv-canvas input[type="date"]::-webkit-calendar-picker-indicator:hover {
              background-color: #40a9ff !important;
              transform: scale(1.1) !important;
              filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2)) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂúñÊ®ôÊ®£Âºè - Firefox */
            .gjs-cv-canvas input[type="date"]::-moz-calendar-picker-indicator {
              background-color: #1890ff !important;
              border-radius: 3px !important;
              padding: 2px !important;
              cursor: pointer !important;
              transition: all 0.2s ease !important;
              filter: drop-shadow(0 1px 2px rgba(0,0,0,0.1)) !important;
            }
            
            .gjs-cv-canvas input[type="date"]::-moz-calendar-picker-indicator:hover {
              background-color: #40a9ff !important;
              transform: scale(1.1) !important;
              filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2)) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂúñÊ®ôÊ®£Âºè - Edge */
            .gjs-cv-canvas input[type="date"]::-ms-clear,
            .gjs-cv-canvas input[type="date"]::-ms-expand {
              background-color: #1890ff !important;
              border-radius: 3px !important;
              padding: 2px !important;
              cursor: pointer !important;
              transition: all 0.2s ease !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÈüøÊáâÂºèÊ®£Âºè */
            @media (max-width: 768px) {
              .gjs-cv-canvas input[type="date"]::before {
                font-size: 10px !important;
                padding: 2px 6px !important;
                top: -20px !important;
              }
              
              .gjs-selected input[type="date"]::after {
                font-size: 11px !important;
                padding: 4px 8px !important;
                top: -35px !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÊâìÂç∞Ê®£Âºè */
            @media print {
              .gjs-cv-canvas input[type="date"]::before,
              .gjs-cv-canvas input[type="date"]::after {
                display: none !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÊ∑±Ëâ≤‰∏ªÈ°åÊîØÊåÅ */
            @media (prefers-color-scheme: dark) {
              .gjs-cv-canvas input[type="date"] {
                background-color: #1f1f1f !important;
                color: #ffffff !important;
                border-color: #404040 !important;
              }
              
              .gjs-cv-canvas input[type="date"]:hover {
                background-color: #2a2a2a !important;
                border-color: #1890ff !important;
              }
              
              .gjs-selected input[type="date"] {
                background-color: #0d1419 !important;
                border-color: #1890ff !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÈ´òÂ∞çÊØîÂ∫¶Ê®°ÂºèÊîØÊåÅ */
            @media (prefers-contrast: high) {
              .gjs-cv-canvas input[type="date"] {
                border-width: 3px !important;
                border-color: #000000 !important;
                background-color: #ffffff !important;
                color: #000000 !important;
              }
              
              .gjs-cv-canvas input[type="date"]:hover {
                border-color: #1890ff !important;
                background-color: #f0f8ff !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÊ∏õÂ∞ëÂãïÁï´Ê®°ÂºèÊîØÊåÅ */
            @media (prefers-reduced-motion: reduce) {
              .gjs-cv-canvas input[type="date"]::before,
              .gjs-cv-canvas input[type="date"]::after {
                animation: none !important;
                transition: none !important;
              }
              
              .gjs-cv-canvas input[type="date"]:hover {
                transform: none !important;
              }
              
              .gjs-selected input[type="date"] {
                transform: none !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÁÑ¶ÈªûÂèØË¶ãÊÄßÊîØÊåÅ */
            @media (prefers-reduced-motion: no-preference) {
              .gjs-cv-canvas input[type="date"]:focus-visible {
                outline: 3px solid #1890ff !important;
                outline-offset: 2px !important;
              }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÈåØË™§ÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].error {
              border-color: #ff4d4f !important;
              background-color: #fff2f0 !important;
              color: #ff4d4f !important;
            }
            
            .gjs-cv-canvas input[type="date"].error::before {
              content: "‚ùå Ê†ºÂºèÈåØË™§: " attr(data-date-format) !important;
              background-color: rgba(255, 77, 79, 0.9) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÊàêÂäüÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].success {
              border-color: #52c41a !important;
              background-color: #f6ffed !important;
              color: #52c41a !important;
            }
            
            .gjs-cv-canvas input[type="date"].success::before {
              content: "‚úÖ Ê†ºÂºèÊ≠£Á¢∫: " attr(data-date-format) !important;
              background-color: rgba(82, 196, 0.9) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑË≠¶ÂëäÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].warning {
              border-color: #faad14 !important;
              background-color: #fffbe6 !important;
              color: #faad14 !important;
            }
            
            .gjs-cv-canvas input[type="date"].warning::before {
              content: "‚ö†Ô∏è Ê†ºÂºèË≠¶Âëä: " attr(data-date-format) !important;
              background-color: rgba(250, 173, 20, 0.9) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑ‰ø°ÊÅØÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].info {
              border-color: #1890ff !important;
              background-color: #e6f7ff !important;
              color: #1890ff !important;
            }
            
            .gjs-cv-canvas input[type="date"].info::before {
              content: "‚ÑπÔ∏è Ê†ºÂºè‰ø°ÊÅØ: " attr(data-date-format) !important;
              background-color: rgba(24, 144, 255, 0.9) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂä†ËºâÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].loading {
              border-color: #d9d9d9 !important;
              background-color: #fafafa !important;
              color: #bfbfbf !important;
              cursor: wait !important;
            }
            
            .gjs-cv-canvas input[type="date"].loading::before {
              content: "‚è≥ ËºâÂÖ•‰∏≠..." !important;
              background-color: rgba(0, 0, 0, 0.6) !important;
              animation: pulse 1.5s ease-in-out infinite !important;
            }
            
            @keyframes pulse {
              0%, 100% { opacity: 0.6; }
              50% { opacity: 1; }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÈ©óË≠âÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].validating {
              border-color: #faad14 !important;
              background-color: #fffbe6 !important;
              color: #faad14 !important;
            }
            
            .gjs-cv-canvas input[type="date"].validating::before {
              content: "üîç È©óË≠â‰∏≠..." !important;
              background-color: rgba(250, 173, 20, 0.9) !important;
              animation: spin 1s linear infinite !important;
            }
            
            @keyframes spin {
              from { transform: rotate(0deg); }
              to { transform: rotate(360deg); }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂÆåÊàêÁãÄÊÖãÊ®£Âºè */
            .gjs-cv-canvas input[type="date"].completed {
              border-color: #52c41a !important;
              background-color: #f6ffed !important;
              color: #52c41a !important;
            }
            
            .gjs-cv-canvas input[type="date"].completed::before {
              content: "üéâ ÂÆåÊàê: " attr(data-date-format) !important;
              background-color: rgba(82, 196, 26, 0.9) !important;
              animation: bounce 0.6s ease-in-out !important;
            }
            
            @keyframes bounce {
              0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
              40% { transform: translateY(-5px); }
              60% { transform: translateY(-3px); }
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÁÑ¶ÈªûÊ®£Âºè */
            .gjs-cv-canvas input[type="date"]:focus {
              outline: none !important;
              border-color: #1890ff !important;
              box-shadow: 0 0 0 3px rgba(24, 144, 255, 0.1) !important;
              transform: scale(1.01) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂπ´Âä©ÊèêÁ§∫Ê®£Âºè */
            .gjs-cv-canvas input[type="date"].help {
              border-color: #722ed1 !important;
              background-color: #f9f0ff !important;
              color: #722ed1 !important;
            }
            
            .gjs-cv-canvas input[type="date"].help::before {
              content: "üí° Âπ´Âä©: " attr(data-date-format) !important;
              background-color: rgba(114, 46, 209, 0.9) !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÁ¶ÅÁî®Ê®£Âºè */
            .gjs-cv-canvas input[type="date"]:disabled {
              background-color: #f5f5f5 !important;
              color: #999 !important;
              cursor: not-allowed !important;
              opacity: 0.6 !important;
            }
            
            /* Êó•ÊúüËº∏ÂÖ•Ê°ÜÁöÑÂè™ËÆÄÊ®£Âºè */
            .gjs-cv-canvas input[type="date"][readonly] {
              background-color: #fafafa !important;
              color: #666 !important;
              cursor: default !important;
            }
            
            /* ÁßªÈô§ÊâÄÊúâ modal Áõ∏ÈóúÊ®£ÂºèÔºåÂè™‰øùÁïôÂè≥ÂÅ¥Èù¢ÊùøÂäüËÉΩ */
          `,
        });
        
        console.log('‚úÖ GrapesJS ÂØ¶‰æãÂâµÂª∫ÊàêÂäü:', grapesEditor);
        
        // Ê∑ªÂä†Ëá™ÂÆöÁæ©ÂäüËÉΩ
        addCustomBlocks(grapesEditor);
        addEditFunctionality(grapesEditor);
        addDeselectFunctionality(grapesEditor);
        
        // Èö±Ëóè Style Manager„ÄÅSettings Âíå Layer Manager ÊåâÈàïÔºå‰∏¶ÈªòË™çÊâìÈñã blocks Èù¢Êùø
        setTimeout(() => {
          try {
            const styleManagerBtn = document.querySelector('.gjs-pn-btn[title="Open Style Manager"]');
            const settingsBtn = document.querySelector('.gjs-pn-btn[title="Settings"]');
            const layerManagerBtn = document.querySelector('.gjs-pn-btn[title="Open Layer Manager"]');
            
            if (styleManagerBtn) {
              styleManagerBtn.style.display = 'none';
              console.log('‚úÖ Style Manager ÊåâÈàïÂ∑≤Èö±Ëóè');
            }
            
            if (settingsBtn) {
              settingsBtn.style.display = 'none';
              console.log('‚úÖ Settings ÊåâÈàïÂ∑≤Èö±Ëóè');
            }
            
            if (layerManagerBtn) {
              layerManagerBtn.style.display = 'none';
              console.log('‚úÖ Layer Manager ÊåâÈàïÂ∑≤Èö±Ëóè');
            }
            
            // ÈªòË™çÊâìÈñã blocks Èù¢Êùø
            const blocksBtn = document.querySelector('.gjs-pn-btn[title="Open Blocks"]');
            if (blocksBtn) {
              blocksBtn.click();
              console.log('‚úÖ ÈªòË™çÊâìÈñã blocks Èù¢Êùø');
            } else {
              console.log('‚ö†Ô∏è Êú™ÊâæÂà∞ blocks ÊåâÈàï');
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è Èö±ËóèÊåâÈàïÊàñÊâìÈñã blocks Èù¢ÊùøÊôÇÂá∫ÈåØ:', error);
          }
        }, 100);

        console.log('üîß Ë®≠ÁΩÆÁ∑®ËºØÂô®ÁãÄÊÖã...');
        setEditor(grapesEditor);
        setIsReady(true);
        
        console.log('‚úÖ GrapesJS Á∑®ËºØÂô®ÂàùÂßãÂåñÊàêÂäü');
        console.log('üéß Ê™¢Êü• onEditorReady ÂõûË™ø:', {
          hasOnEditorReady: !!onEditorReady,
          onEditorReadyType: onEditorReady ? typeof onEditorReady : 'null'
        });
        
        // ÈÄöÁü•Áà∂ÁµÑ‰ª∂Á∑®ËºØÂô®Â∑≤Ê∫ñÂÇôÂ•Ω
        if (onEditorReady) {
          console.log('üéß Ë™øÁî® onEditorReady ÂõûË™ø...');
          try {
            onEditorReady(grapesEditor);
            console.log('‚úÖ onEditorReady ÂõûË™øË™øÁî®ÊàêÂäü');
          } catch (error) {
            console.error('‚ùå onEditorReady ÂõûË™øË™øÁî®Â§±Êïó:', error);
          }
        } else {
          console.log('‚ö†Ô∏è Ê≤íÊúâ onEditorReady ÂõûË™øÔºåË∑≥ÈÅéË™øÁî®');
        }
        
      } catch (error) {
        console.error('‚ùå GrapesJS ÂàùÂßãÂåñÂ§±Êïó:', error);
        setIsReady(false);
      }
    }).catch(error => {
      console.error('‚ùå ËºâÂÖ•Ë™ûË®ÄË≥áÊ∫êÂ§±Êïó:', error);
      setIsReady(false);
    });

    return () => {
      if (editor) {
        console.log('üßπ Ê∏ÖÁêÜ GrapesJS Á∑®ËºØÂô®');
        editor.destroy();
      }
    };
  }, [initialHtmlContent, onEditorReady]);

  // Ê∑ªÂä† setContent ÊñπÊ≥ï‰æÜÊîØÊåÅÂ§ñÈÉ®ÂÖßÂÆπÊõ¥Êñ∞
  const setContent = useCallback((htmlContent) => {
    if (editor && htmlContent) {
      console.log('üîÑ Ë®≠ÁΩÆÊñ∞ÂÖßÂÆπÂà∞Á∑®ËºØÂô®ÈñãÂßã');
      console.log('üìù ÂéüÂßãÂÖßÂÆπÈï∑Â∫¶:', htmlContent.length);
      console.log('üìù ÂéüÂßãÂÖßÂÆπÂâç100Â≠óÁ¨¶:', htmlContent.substring(0, 100) + '...');
      
      try {
        // ÂàÜÈõ¢ HTML Âíå CSS
        let html = htmlContent;
        let css = '';
        
        console.log('üîç Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´Ê®£ÂºèÊ®ôÁ±§...');
        console.log('üîç ÂåÖÂê´ <style> Ê®ôÁ±§:', htmlContent.includes('<style>'));
        
        // Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´Ê®£ÂºèÊ®ôÁ±§
        if (htmlContent.includes('<style>')) {
          console.log('üîç ÈñãÂßãËß£ÊûêÊ®£ÂºèÊ®ôÁ±§...');
          const styleMatch = htmlContent.match(/<style[^>]*>([\s\S]*?)<\/style>/);
          if (styleMatch) {
            css = styleMatch[1];
            html = htmlContent.replace(/<style[^>]*>[\s\S]*?<\/style>/g, '');
            console.log('‚úÖ Ê®£ÂºèËß£ÊûêÊàêÂäü');
            console.log('üé® CSS ÂÖßÂÆπÈï∑Â∫¶:', css.length);
            console.log('üìÑ HTML ÂÖßÂÆπÈï∑Â∫¶:', html.length);
          } else {
            console.log('‚ö†Ô∏è Ê®£ÂºèÊ®ôÁ±§ÂåπÈÖçÂ§±Êïó');
          }
        } else {
          console.log('‚ÑπÔ∏è Êú™Ê™¢Ê∏¨Âà∞Ê®£ÂºèÊ®ôÁ±§Ôºå‰ΩøÁî®ÂéüÂßãÂÖßÂÆπ‰ΩúÁÇ∫ HTML');
        }
        
        // Ë®≠ÁΩÆ HTML ÂÖßÂÆπ
        console.log('üîÑ ÈñãÂßãË®≠ÁΩÆ HTML ÂÖßÂÆπ...');
        console.log('üîÑ Ë™øÁî® editor.setComponents()...');
        editor.setComponents(html);
        console.log('‚úÖ HTML ÂÖßÂÆπË®≠ÁΩÆÂÆåÊàê');
        
        // Ë®≠ÁΩÆ CSS Ê®£Âºè
        if (css) {
          console.log('üîÑ ÈñãÂßãË®≠ÁΩÆ CSS Ê®£Âºè...');
          console.log('üîÑ Ë™øÁî® editor.setStyle()...');
          editor.setStyle(css);
          console.log('‚úÖ CSS Ê®£ÂºèË®≠ÁΩÆÂÆåÊàê');
        } else {
          console.log('‚ÑπÔ∏è ÁÑ° CSS Ê®£ÂºèÈúÄË¶ÅË®≠ÁΩÆ');
        }
        
        // È©óË≠âË®≠ÁΩÆÁµêÊûú
        console.log('üîç È©óË≠âË®≠ÁΩÆÁµêÊûú...');
        const currentHtml = editor.getHtml();
        const currentCss = editor.getCss();
        console.log('üìä Áï∂ÂâçÁ∑®ËºØÂô® HTML Èï∑Â∫¶:', currentHtml.length);
        console.log('üìä Áï∂ÂâçÁ∑®ËºØÂô® CSS Èï∑Â∫¶:', currentCss.length);
        
        console.log('‚úÖ ÂÖßÂÆπË®≠ÁΩÆÊàêÂäüÂÆåÊàê');
      } catch (error) {
        console.error('‚ùå Ë®≠ÁΩÆÂÖßÂÆπÊôÇÁôºÁîüÈåØË™§:', error);
        console.error('‚ùå ÈåØË™§Â†ÜÁñä:', error.stack);
        
        // Â¶ÇÊûúÂàÜÈõ¢Â§±ÊïóÔºåÂòóË©¶Áõ¥Êé•Ë®≠ÁΩÆ
        console.log('üîÑ ÂòóË©¶ÂÇôÁî®ÊñπÊ≥ïÔºöÁõ¥Êé•Ë®≠ÁΩÆÂéüÂßãÂÖßÂÆπ...');
        try {
          editor.setComponents(htmlContent);
          console.log('‚úÖ ÂÇôÁî®ÊñπÊ≥ïÊàêÂäü');
        } catch (fallbackError) {
          console.error('‚ùå ÂÇôÁî®ÊñπÊ≥ï‰πüÂ§±Êïó:', fallbackError);
        }
      }
    } else {
      console.log('‚ö†Ô∏è setContent Ë™øÁî®Â§±ÊïóÔºö', {
        hasEditor: !!editor,
        hasContent: !!htmlContent,
        contentLength: htmlContent ? htmlContent.length : 0
      });
    }
  }, [editor]);

  return { 
    editor, 
    isReady, 
    languageResources, 
    setContent 
  };
};

const addCustomBlocks = (editor) => {
  const blockManager = editor.BlockManager;
  
  // Áç≤ÂèñË™ûË®ÄË≥áÊ∫ê
  const userLanguage = localStorage.getItem('language') || 'zh-TC';
  let resources;
  
  // Ê†πÊìöË™ûË®ÄË®≠ÁΩÆÁç≤ÂèñÂ∞çÊáâÁöÑÁøªË≠Ø
  switch (userLanguage) {
    case 'zh-SC':
      resources = require('../locales/zh-SC.js').default;
      break;
    case 'zh-TC':
      resources = require('../locales/zh-TC.js').default;
      break;
    case 'en':
      resources = require('../locales/en.js').default;
      break;
    default:
      resources = require('../locales/zh-TC.js').default;
  }
  
  const t = resources.eformDesigner?.grapesJs || {};
  
  // ‰ΩàÂ±ÄÂÖÉÁ¥†
  blockManager.add('section', {
    label: t.section || 'Section',
    category: t.layout || 'Layout',
    content: '<section class="section"><h2>This is a section</h2><p>This is a box</p></section>',
    media: '<svg viewBox="0 0 24 24"><path d="M2 20h20V4H2v16zm18-2V6H4v12h16z"/></svg>'
  });
  
  blockManager.add('div', {
    label: t.div || 'Div',
    category: t.layout || 'Layout',
    content: '<div class="div-block"><p>This is a div block</p></div>',
    media: '<svg viewBox="0 0 24 24"><path d="M3 3h18v18H3V3zm16 16V5H5v14h14z"/></svg>'
  });
  
  blockManager.add('container', {
    label: t.container || 'Container',
    category: t.layout || 'Layout',
    content: '<div class="container"><div class="container-content"></div></div>',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"/></svg>'
  });
  
  // ÊñáÂ≠óÂÖÉÁ¥†
  blockManager.add('text', {
    label: t.text || 'Text',
    category: t.basic || 'Basic',
    content: '<div data-gjs-type="text">Insert your text here</div>',
    media: '<svg viewBox="0 0 24 24"><path d="M2.5 4v3h5v12h3V7h5V4H2.5zM21.5 9h-9v3h3v7h3v-7h3V9z"/></svg>'
  });
  
  blockManager.add('heading', {
    label: t.heading || 'Heading',
    category: t.basic || 'Basic',
    content: '<h2>Insert your heading here</h2>',
    media: '<svg viewBox="0 0 24 24"><path d="M6 3h2v18H6zm3.5 12l3-6 3 6H9.5z"/></svg>'
  });
  
  blockManager.add('paragraph', {
    label: t.paragraph || 'Paragraph',
    category: t.basic || 'Basic',
    content: '<p>Insert your paragraph here</p>',
    media: '<svg viewBox="0 0 24 24"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/></svg>'
  });
  
  // Ë°®ÂñÆÂÖÉÁ¥†
  blockManager.add('form', {
    label: t.form || 'Form',
    category: t.forms || 'Forms',
    content: '<form class="form"><input type="text" placeholder="Enter text here" /></form>',
    media: '<svg viewBox="0 0 24 24"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"/></svg>'
  });
  
  blockManager.add('input', {
    label: t.input || 'Input',
    category: t.forms || 'Forms',
    content: '<input type="text" placeholder="Enter text here" />',
    media: '<svg viewBox="0 0 24 24"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z"/></svg>'
  });
  
  blockManager.add('button', {
    label: t.button || 'Button',
    category: t.forms || 'Forms',
    content: '<button class="button">Click me</button>',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>'
  });
  
  blockManager.add('textarea', {
    label: t.textarea || 'Textarea',
    category: t.forms || 'Forms',
    content: '<textarea placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑË®äÊÅØ" rows="4" cols="50"></textarea>',
    media: '<svg viewBox="0 0 24 24"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z"/></svg>'
  });
  
  // Êõ¥Â§öË°®ÂñÆÊéß‰ª∂
  blockManager.add('select', {
    label: t.select || 'Select',
    category: t.forms || 'Forms',
    content: '<select><option value="">Ë´ãÈÅ∏Êìá...</option><option value="option1">ÈÅ∏È†Ö 1</option><option value="option2">ÈÅ∏È†Ö 2</option><option value="option3">ÈÅ∏È†Ö 3</option></select>',
    media: '<svg viewBox="0 0 24 24"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>'
  });
  
  blockManager.add('radio', {
    label: t.radio || 'Radio',
    category: t.forms || 'Forms',
    content: '<div><label><input type="radio" name="radio1" value="option1" /> ÈÅ∏È†Ö 1</label><br/><label><input type="radio" name="radio1" value="option2" /> ÈÅ∏È†Ö 2</label><br/><label><input type="radio" name="radio1" value="option3" /> ÈÅ∏È†Ö 3</label></div>',
    media: '<svg viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>'
  });
  
  blockManager.add('checkbox', {
    label: t.checkbox || 'Checkbox',
    category: t.forms || 'Forms',
    content: '<div><label><input type="checkbox" value="check1" /> ÈÅ∏È†Ö 1</label><br/><label><input type="checkbox" value="check2" /> ÈÅ∏È†Ö 2</label><br/><label><input type="checkbox" value="check3" /> ÈÅ∏È†Ö 3</label></div>',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>'
  });
  
  blockManager.add('file-upload', {
    label: t.fileUpload || 'File Upload',
    category: t.forms || 'Forms',
    content: '<input type="file" />',
    media: '<svg viewBox="0 0 24 24"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 2 2h12c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11z"/></svg>'
  });
  
  blockManager.add('email', {
    label: t.email || 'Email',
    category: t.forms || 'Forms',
    content: '<input type="email" placeholder="Ë´ãËº∏ÂÖ•ÈõªÂ≠êÈÉµ‰ª∂" />',
    media: '<svg viewBox="0 0 24 24"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/></svg>'
  });
  
  blockManager.add('password', {
    label: t.password || 'Password',
    category: t.forms || 'Forms',
    content: '<input type="password" placeholder="Ë´ãËº∏ÂÖ•ÂØÜÁ¢º" />',
    media: '<svg viewBox="0 0 24 24"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"/></svg>'
  });
  
  blockManager.add('number', {
    label: t.number || 'Number',
    category: t.forms || 'Forms',
    content: '<input type="number" placeholder="Ë´ãËº∏ÂÖ•Êï∏Â≠ó" />',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>'
  });
  
  blockManager.add('date', {
    label: t.date || 'Date',
    category: t.forms || 'Forms',
    content: '<input type="date" data-date-format="YYYY-MM-DD" />',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
  });
  
  blockManager.add('time', {
    label: t.time || 'Time',
    category: t.forms || 'Forms',
    content: '<input type="time" />',
    media: '<svg viewBox="0 0 24 24"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"/></svg>'
  });
  
  blockManager.add('url', {
    label: t.url || 'URL',
    category: t.forms || 'Forms',
    content: '<input type="url" placeholder="Ë´ãËº∏ÂÖ•Á∂≤ÂùÄ" />',
    media: '<svg viewBox="0 0 24 24"><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1s1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/></svg>'
  });
  
  blockManager.add('tel', {
    label: t.tel || 'Phone',
    category: t.forms || 'Forms',
    content: '<input type="tel" placeholder="Ë´ãËº∏ÂÖ•ÈõªË©±ËôüÁ¢º" />',
    media: '<svg viewBox="0 0 24 24"><path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/></svg>'
  });
  
  blockManager.add('label', {
    label: t.label || 'Label',
    category: t.forms || 'Forms',
    content: '<label for="input1">Ê®ôÁ±§ÊñáÂ≠ó</label>',
    media: '<svg viewBox="0 0 24 24"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z"/></svg>'
  });
  
  blockManager.add('fieldset', {
    label: t.fieldset || 'Fieldset',
    category: t.forms || 'Forms',
    content: '<fieldset><legend>Áæ§ÁµÑÊ®ôÈ°å</legend><input type="text" placeholder="Áæ§ÁµÑÂÖßËº∏ÂÖ•Ê°Ü" /></fieldset>',
    media: '<svg viewBox="0 0 24 24"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>'
  });
  
  console.log('‚úÖ Â∑≤Ê∑ªÂä† 27 ÂÄãËá™ÂÆöÁæ©ÂçÄÂ°ä');
};

// ÁßªÈô§‰∏çÂÜçÈúÄË¶ÅÁöÑÈÄöÁî®Ë°®ÂñÆÁµÑ‰ª∂ÂâµÂª∫ÂáΩÊï∏ÔºåÂõ†ÁÇ∫ÈÄô‰∫õÂäüËÉΩÁèæÂú®Âú®Âè≥ÂÅ¥Èù¢Êùø‰∏≠ËôïÁêÜ

const addEditFunctionality = (editor) => {
  console.log('üîß ÈñãÂßãÊ∑ªÂä†Á∑®ËºØÂäüËÉΩ...');
  
  // ÂàùÂßãÂåñË°®ÂñÆÊï∏ÊìöÂáΩÊï∏ - ‰øùÁïôÁî®ÊñºÂè≥ÂÅ¥Èù¢Êùø
  const initializeFormData = (component) => {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è initializeFormData: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const tagName = component.get('tagName');
      if (!tagName) {
        console.warn('‚ö†Ô∏è initializeFormData: ÁµÑ‰ª∂Ê®ôÁ±§ÂêçÁ®±ÁÑ°Êïà');
        return;
      }
      
      console.log('üîß ÂàùÂßãÂåñË°®ÂñÆÊï∏Êìö:', tagName);
      
      // Ê†πÊìöÁµÑ‰ª∂È°ûÂûãÂàùÂßãÂåñ‰∏çÂêåÁöÑË°®ÂñÆÊï∏Êìö
      const attributes = component.getAttributes();
      
      switch (tagName.toLowerCase()) {
        case 'input':
          // Â∞áÊï∏ÊìöÂ≠òÂÑ≤Âà∞ÁµÑ‰ª∂Êú¨Ë∫´Ôºå‰æõÂè≥ÂÅ¥Èù¢Êùø‰ΩøÁî®
          const inputType = attributes.type || 'text';
          
          // ÂÑ™ÂÖàÁç≤ÂèñÂØ¶ÈöõÈ°ØÁ§∫ÁöÑÂÖßÂÆπ
          let inputValue = '';
          try {
            // ÂÑ™ÂÖàÂæû DOM ÂÖÉÁ¥†Áç≤Âèñ value Â±¨ÊÄßÔºåÈÄôÊòØÊúÄÂèØÈù†ÁöÑÊñπÊ≥ï
            const el = component.getEl ? component.getEl() : null;
            if (el) {
              inputValue = el.value || el.getAttribute('value') || '';
              console.log('‚úÖ Âæû DOM Áç≤Âèñ input value:', inputValue);
            }
            
            // Â¶ÇÊûú DOM ÊñπÊ≥ïÂ§±ÊïóÔºåÂòóË©¶ÂÖ∂‰ªñÊñπÊ≥ï
            if (!inputValue) {
              inputValue = component.get('content') || attributes.value || '';
              console.log('‚ö†Ô∏è ‰ΩøÁî®ÂÇôÁî®ÊñπÊ≥ïÁç≤Âèñ input value:', inputValue);
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è Áç≤Âèñ input value ÊôÇÂá∫ÈåØ:', error);
            inputValue = attributes.value || '';
          }
          
          const editFormData = {
            type: inputType,
            placeholder: attributes.placeholder || '',
            value: inputValue,
            name: attributes.name || '',
            required: attributes.required || false,
            disabled: attributes.disabled || false,
            readonly: attributes.readonly || false,
            maxlength: attributes.maxlength || '',
            minlength: attributes.minlength || '',
            pattern: attributes.pattern || '',
            title: attributes.title || ''
          };
          
          // Â¶ÇÊûúÊòØÊó•ÊúüÈ°ûÂûãÔºåÊ∑ªÂä†Êó•ÊúüÊ†ºÂºè‰ø°ÊÅØ
          if (inputType === 'date') {
            editFormData.dateFormat = attributes['data-date-format'] || 'YYYY-MM-DD';
          }
          
          component.set('editFormData', editFormData);
          console.log('üîß input ÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàê:', editFormData);
          break;
          
        case 'textarea':
          // ÂÑ™ÂÖàÂæû DOM ÂÖÉÁ¥†Áç≤Âèñ textContentÔºåÈÄôÊòØÊúÄÂèØÈù†ÁöÑÊñπÊ≥ï
          let textareaValue = '';
          try {
            const el = component.getEl ? component.getEl() : null;
            if (el) {
              console.log(' textarea DOM ÂÖÉÁ¥†:', el);
              console.log('üîç textarea DOM ÂÖÉÁ¥†Ê®ôÁ±§:', el.tagName);
              console.log('üîç textarea DOM ÂÖÉÁ¥† innerHTML:', el.innerHTML);
              console.log('üîç textarea DOM ÂÖÉÁ¥† textContent:', el.textContent);
              console.log('üîç textarea DOM ÂÖÉÁ¥† innerText:', el.innerText);
              
              // ÂòóË©¶Â§öÁ®ÆÊñπÊ≥ïÁç≤ÂèñÂÖßÂÆπ
              textareaValue = el.textContent || el.innerText || el.innerHTML || '';
              
              // Â¶ÇÊûúÂÖßÂÆπÁÇ∫Á©∫ÔºåÂòóË©¶ÂæûÁµÑ‰ª∂ÁöÑÂÖ∂‰ªñÂ±¨ÊÄßÁç≤Âèñ
              if (!textareaValue) {
                textareaValue = component.get('content') || component.get('innerHTML') || '';
                console.log('‚ö†Ô∏è ÂæûÁµÑ‰ª∂Â±¨ÊÄßÁç≤Âèñ textarea ÂÖßÂÆπ:', textareaValue);
              }
              
              // Â¶ÇÊûú‰ªçÁÑ∂ÁÇ∫Á©∫ÔºåÂòóË©¶ÂæûÁµÑ‰ª∂ÁöÑÂ≠êÁµÑ‰ª∂Áç≤Âèñ
              if (!textareaValue) {
                try {
                  const components = component.get('components');
                  if (components && components.length > 0) {
                    // textarea ÁöÑÂÖßÂÆπÈÄöÂ∏∏Â≠òÂÑ≤Âú®Â≠êÁµÑ‰ª∂‰∏≠
                    const firstChild = components[0];
                    if (firstChild && firstChild.get && typeof firstChild.get === 'function') {
                      textareaValue = firstChild.get('content') || '';
                      console.log('‚ö†Ô∏è ÂæûÂ≠êÁµÑ‰ª∂Áç≤Âèñ textarea ÂÖßÂÆπ:', textareaValue);
                    }
                  }
                } catch (childError) {
                  console.warn('‚ö†Ô∏è Áç≤ÂèñÂ≠êÁµÑ‰ª∂ÂÖßÂÆπÊôÇÂá∫ÈåØ:', childError);
                }
              }
              
              console.log('‚úÖ ÊúÄÁµÇÁç≤ÂèñÁöÑ textarea ÂÖßÂÆπ:', textareaValue);
            } else {
              console.warn('‚ö†Ô∏è textarea ÁµÑ‰ª∂Ê≤íÊúâ DOM ÂÖÉÁ¥†');
            }
            
            // Â¶ÇÊûú DOM ÊñπÊ≥ïÂ§±ÊïóÔºåÂòóË©¶ÂÖ∂‰ªñÊñπÊ≥ï
            if (!textareaValue) {
              textareaValue = component.get('content') || component.get('innerHTML') || '';
              console.log('‚ö†Ô∏è ‰ΩøÁî®ÂÇôÁî®ÊñπÊ≥ïÁç≤Âèñ textarea ÂÖßÂÆπ:', textareaValue);
            }
            
            // ÊúÄÂæåÁöÑÂÇôÁî®ÊñπÊ°àÔºöÊ™¢Êü•Â≠êÁµÑ‰ª∂
            if (!textareaValue) {
              try {
                const components = component.get('components');
                if (components && components.length > 0) {
                  const firstChild = components[0];
                  if (firstChild && firstChild.get && typeof firstChild.get === 'function') {
                    textareaValue = firstChild.get('content') || '';
                    console.log('‚ö†Ô∏è ÊúÄÁµÇÂÇôÁî®ÊñπÊ°àÔºöÂæûÂ≠êÁµÑ‰ª∂Áç≤Âèñ textarea ÂÖßÂÆπ:', textareaValue);
                  }
                }
              } catch (finalChildError) {
                console.warn('‚ö†Ô∏è ÊúÄÁµÇÂÇôÁî®ÊñπÊ°àÁç≤ÂèñÂ≠êÁµÑ‰ª∂ÂÖßÂÆπÊôÇÂá∫ÈåØ:', finalChildError);
              }
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è Áç≤Âèñ textarea ÂÖßÂÆπÊôÇÂá∫ÈåØ:', error);
            textareaValue = component.get('content') || '';
          }
          
          const textareaData = {
            placeholder: attributes.placeholder || '',
            value: textareaValue,
            defaultValue: textareaValue, // Á¢∫‰øù defaultValue Âíå value ‰∏ÄËá¥
            name: attributes.name || '',
            required: attributes.required || false,
            disabled: attributes.disabled || false,
            readonly: attributes.readonly || false,
            rows: attributes.rows || '4',
            cols: attributes.cols || '50',
            maxlength: attributes.maxlength || '',
            minlength: attributes.minlength || ''
          };
          
          component.set('editFormData', textareaData);
          console.log('üîß textarea ÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàê:', textareaData);
          break;
          
        case 'select':
          const options = component.get('components');
          let selectOptions = [];
          if (options && options.length > 0) {
            selectOptions = options.map(option => {
              let text = '';
              let value = '';
              let selected = false;
              
              try {
                // ÂÑ™ÂÖàÂæû DOM ÂÖÉÁ¥†Áç≤ÂèñÊñáÂ≠óÂÖßÂÆπÔºåÈÄôÊòØÊúÄÂèØÈù†ÁöÑÊñπÊ≥ï
                const el = option.getEl ? option.getEl() : null;
                if (el) {
                  text = el.textContent || el.innerText || '';
                  console.log('‚úÖ Âæû DOM Áç≤ÂèñÊñáÂ≠ó:', text);
                }
                
                // Â¶ÇÊûú DOM ÊñπÊ≥ïÂ§±ÊïóÔºåÂòóË©¶ÂÖ∂‰ªñÊñπÊ≥ï
                if (!text) {
                  text = option.get('content') || option.get('innerHTML') || option.get('text') || '';
                  console.log('‚ö†Ô∏è ‰ΩøÁî®ÂÇôÁî®ÊñπÊ≥ïÁç≤ÂèñÊñáÂ≠ó:', text);
                }
                
                // Áç≤Âèñ value Âíå selected Â±¨ÊÄß
                value = option.getAttributes().value || '';
                selected = option.getAttributes().selected || false;
                
                // Â¶ÇÊûúÊñáÂ≠óÁÇ∫Á©∫‰ΩÜ value ÊúâÂÄºÔºå‰ΩøÁî® value ‰ΩúÁÇ∫ÊñáÂ≠ó
                if (!text && value) {
                  text = value;
                  console.log('üîÑ ‰ΩøÁî® value ‰ΩúÁÇ∫ÊñáÂ≠ó:', text);
                }
                
                console.log('üîç Select option Ëß£ÊûêÁµêÊûú:', {
                  value: value,
                  text: text.trim(),
                  selected: selected
                });
                
                return {
                  value: value,
                  text: text.trim(),
                  selected: selected
                };
              } catch (optionError) {
                console.warn('‚ö†Ô∏è Ëß£Êûê select option ÊôÇÂá∫ÈåØ:', optionError);
                return {
                  value: '',
                  text: 'ÈÅ∏È†Ö',
                  selected: false
                };
              }
            });
          }
          
          component.set('editFormData', {
            name: attributes.name || '',
            required: attributes.required || false,
            disabled: attributes.disabled || false,
            multiple: attributes.multiple || false,
            size: attributes.size || '1',
            options: selectOptions
          });
          console.log('üîß select ÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàêÔºåÈÅ∏È†ÖÊï∏Èáè:', selectOptions.length);
          break;
          
        case 'button':
          component.set('editFormData', {
            type: attributes.type || 'button',
            value: component.get('content') || '',
            name: attributes.name || '',
            disabled: attributes.disabled || false,
            form: attributes.form || '',
            formaction: attributes.formaction || '',
            formmethod: attributes.formmethod || 'get',
            formnovalidate: attributes.formnovalidate || false
          });
          console.log('üîß button ÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàê');
          break;
          
        case 'label':
          component.set('editFormData', {
            for: attributes.for || '',
            value: component.get('content') || '',
            required: attributes.required || false
          });
          console.log('üîß label ÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàê');
          break;
          
        default:
          component.set('editFormData', {
            tagName: tagName,
            content: component.get('content') || '',
            ...attributes
          });
          console.log('üîß ÈªòË™çÁµÑ‰ª∂Êï∏ÊìöÂàùÂßãÂåñÂÆåÊàê:', tagName);
          break;
      }
    } catch (error) {
      console.error('‚ùå initializeFormData ÁôºÁîüÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  };

  // ÁßªÈô§ÊâÄÊúâ modal Áõ∏ÈóúÂáΩÊï∏
  // const createEditModal = () => { ... } - Â∑≤ÁßªÈô§
  // const showEditModal = () => { ... } - Â∑≤ÁßªÈô§
  // const hideEditModal = () => { ... } - Â∑≤ÁßªÈô§
  // const renderEditForm = () => { ... } - Â∑≤ÁßªÈô§

  // ÁßªÈô§ÊâÄÊúâ update*Component ÂáΩÊï∏ÔºåÂõ†ÁÇ∫ÈÄô‰∫õÈÇèËºØÂ∞áÂú®Âè≥ÂÅ¥Èù¢Êùø‰∏≠ËôïÁêÜ
  // const updateInputComponent = async () => { ... } - Â∑≤ÁßªÈô§
  // const updateTextareaComponent = async () => { ... } - Â∑≤ÁßªÈô§
  // const updateSelectComponent = async () => { ... } - Â∑≤ÁßªÈô§
  // const updateButtonComponent = async () => { ... } - Â∑≤ÁßªÈô§
  // const updateLabelComponent = async () => { ... } - Â∑≤ÁßªÈô§

  // ÁßªÈô§ handleFormChange Âíå handleSave ÂáΩÊï∏ÔºåÂõ†ÁÇ∫ÈÄô‰∫õÈÇèËºØÂ∞áÂú®Âè≥ÂÅ¥Èù¢Êùø‰∏≠ËôïÁêÜ
  // const handleFormChange = (field, value) => { ... } - Â∑≤ÁßªÈô§
  // const handleSave = async () => { ... } - Â∑≤ÁßªÈô§

  // ‰ΩøÁî® GrapesJS ÂÆòÊñπÊñπÊ≥ïÊ∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞ÁµÑ‰ª∂Â∑•ÂÖ∑Ê¨Ñ
  const addEditButtonToToolbar = (component) => {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è addEditButtonToToolbar: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      // Áç≤ÂèñÁµÑ‰ª∂ÁöÑÂ∑•ÂÖ∑Ê¨Ñ
      const toolbar = component.get('toolbar');
      
      // Ê™¢Êü•ÊòØÂê¶Â∑≤Á∂ìÊúâÁ∑®ËºØÊåâÈàï
      if (toolbar && toolbar.some(item => item.command === 'edit-component')) {
        return;
      }
      
      // ÂâµÂª∫Á∑®ËºØÊåâÈàïÈÖçÁΩÆ
      const editButton = {
        attributes: { class: 'gjs-edit-btn-toolbar' },
        command: 'edit-component',
        label: `<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
        </svg>`,
        title: 'Á∑®ËºØÁµÑ‰ª∂',
        // ‰ΩøÁî®ÁôΩËâ≤ÂúñÊ®ôÔºåËàáÂÖ∂‰ªñÂ∑•ÂÖ∑Ê¨ÑÊåâÈàï‰øùÊåÅ‰∏ÄËá¥
        style: {
          color: '#ffffff', // ÊîπÁÇ∫ÁôΩËâ≤ÂúñÊ®ô
          fontSize: '14px',
          padding: '4px',
          cursor: 'pointer',
          backgroundColor: '#1890ff', // ËóçËâ≤ËÉåÊôØ
          border: 'none',
          borderRadius: '4px',
          width: '28px',
          height: '28px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          opacity: '0.9',
          transition: 'opacity 0.2s ease'
        }
      };
      
      // Â∞áÁ∑®ËºØÊåâÈàïÊ∑ªÂä†Âà∞ÁµÑ‰ª∂Â∑•ÂÖ∑Ê¨Ñ
      if (toolbar) {
        toolbar.push(editButton);
      } else {
        component.set('toolbar', [editButton]);
      }
      
      const tagName = component.get('tagName');
      const componentId = component.getId();
      console.log('‚úÖ Á∑®ËºØÊåâÈàïÂ∑≤Ê∑ªÂä†Âà∞ÁµÑ‰ª∂Â∑•ÂÖ∑Ê¨Ñ:', tagName, componentId);
    } catch (error) {
      console.error('‚ùå addEditButtonToToolbar ÁôºÁîüÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  };

  // ÁÇ∫ÊâÄÊúâÁèæÊúâÁµÑ‰ª∂Ê∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞Â∑•ÂÖ∑Ê¨Ñ
  const addEditButtonsToAllComponentsToolbar = () => {
    try {
      const allComponents = editor.DomComponents.getComponents();
      let validComponents = 0;
      let invalidComponents = 0;
      
      allComponents.forEach(component => {
        // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
        if (component && component.get && typeof component.get === 'function') {
          addEditButtonToToolbar(component);
          validComponents++;
        } else {
          console.warn('‚ö†Ô∏è ÁôºÁèæÁÑ°ÊïàÁµÑ‰ª∂ÔºåË∑≥ÈÅéÊ∑ªÂä†Á∑®ËºØÊåâÈàï:', component);
          invalidComponents++;
        }
      });
      
      console.log('‚úÖ Â∑≤ÁÇ∫ÊâÄÊúâÁèæÊúâÁµÑ‰ª∂Ê∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞Â∑•ÂÖ∑Ê¨Ñ');
      console.log(`üìä ÊúâÊïàÁµÑ‰ª∂: ${validComponents}, ÁÑ°ÊïàÁµÑ‰ª∂: ${invalidComponents}`);
    } catch (error) {
      console.error('‚ùå addEditButtonsToAllComponentsToolbar ÁôºÁîüÈåØË™§:', error);
    }
  };

  // Áõ£ËÅΩÁµÑ‰ª∂ÈÅ∏‰∏≠‰∫ã‰ª∂
  editor.on('component:selected', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:selected: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const tagName = component.get('tagName');
      const componentId = component.getId();
      console.log(' ÁµÑ‰ª∂Ë¢´ÈÅ∏‰∏≠:', tagName, componentId);
      
      // ÁÇ∫ÈÅ∏‰∏≠ÁöÑÁµÑ‰ª∂Ê∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞Â∑•ÂÖ∑Ê¨ÑÔºàÂ¶ÇÊûúÈÇÑÊ≤íÊúâÁöÑË©±Ôºâ
      addEditButtonToToolbar(component);
      
      // Â¶ÇÊûúÊòØ textarea ÁµÑ‰ª∂ÔºåÁ¢∫‰øùÂÖßÂÆπÊ≠£Á¢∫È°ØÁ§∫
      if (tagName.toLowerCase() === 'textarea') {
        // Á¢∫‰øù editFormData Â∑≤ÂàùÂßãÂåñ
        if (!component.get('editFormData')) {
          console.log('üîß textarea ÁµÑ‰ª∂ÈÅ∏‰∏≠ÔºåÂàùÂßãÂåñ editFormData');
          initializeFormData(component);
        }
        
        const content = component.get('content');
        const el = component.getEl();
        if (el) {
          console.log('üîç textarea ÁµÑ‰ª∂ÈÅ∏‰∏≠ÔºåÊ™¢Êü•ÂÖßÂÆπ:', {
            componentContent: content,
            domContent: el.textContent,
            attributes: component.getAttributes(),
            editFormData: component.get('editFormData')
          });
          
          // Â¶ÇÊûú DOM ÂÖßÂÆπËàáÁµÑ‰ª∂ÂÖßÂÆπ‰∏ç‰∏ÄËá¥ÔºåÂ∞á DOM ÂÖßÂÆπÂêåÊ≠•Âà∞ÁµÑ‰ª∂
          if (content !== el.textContent) {
            console.log('üîÑ ÂêåÊ≠• textarea ÂÖßÂÆπÔºåDOM ËàáÁµÑ‰ª∂‰∏ç‰∏ÄËá¥');
            const domContent = el.textContent || '';
            
            // Â∞á DOM ÂÖßÂÆπÂêåÊ≠•Âà∞ÁµÑ‰ª∂ÁöÑ content Â±¨ÊÄß
            component.set('content', domContent);
            
            // ÂêåÊôÇÊõ¥Êñ∞ÂÖ∂‰ªñÁõ∏ÈóúÂ±¨ÊÄß
            try {
              component.set('innerHTML', domContent);
              component.set('textContent', domContent);
              console.log('‚úÖ textarea ÁµÑ‰ª∂ÂÖßÂÆπÂ±¨ÊÄßÂ∑≤ÂêåÊ≠•Âà∞ DOM ÂÖßÂÆπ:', domContent);
            } catch (error) {
              console.warn('‚ö†Ô∏è ÂêåÊ≠•ÁµÑ‰ª∂ÂÖßÂÆπÂ±¨ÊÄßÊôÇÂá∫ÈåØ:', error);
            }
            
            // Êõ¥Êñ∞ editFormData ‰ª•‰øùÊåÅ‰∏ÄËá¥ÊÄß
            const currentEditFormData = component.get('editFormData') || {};
            currentEditFormData.defaultValue = domContent;
            currentEditFormData.value = domContent;
            component.set('editFormData', currentEditFormData);
            console.log('‚úÖ textarea editFormData Â∑≤ÂêåÊ≠•Âà∞ DOM ÂÖßÂÆπ:', domContent);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå component:selected ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });

  // Áõ£ËÅΩÁµÑ‰ª∂ÂèñÊ∂àÈÅ∏‰∏≠‰∫ã‰ª∂
  editor.on('component:deselected', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:deselected: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const tagName = component.get('tagName');
      const componentId = component.getId();
      console.log(' ÁµÑ‰ª∂ÂèñÊ∂àÈÅ∏‰∏≠:', tagName, componentId);
      
      // Â∑•ÂÖ∑Ê¨ÑÊåâÈàïÊúÉËá™ÂãïÈö±ËóèÔºå‰∏çÈúÄË¶ÅÈ°çÂ§ñËôïÁêÜ
    } catch (error) {
      console.error('‚ùå component:deselected ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });

  // Áõ£ËÅΩÊñ∞ÁµÑ‰ª∂Ê∑ªÂä†‰∫ã‰ª∂
  editor.on('component:add', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:add: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      console.log(' Êñ∞ÁµÑ‰ª∂Ë¢´Ê∑ªÂä†:', component.get('tagName'), component.getId());
      
      // Â¶ÇÊûúÊòØÊó•ÊúüËº∏ÂÖ•Ê°ÜÔºåÁ¢∫‰øùË®≠ÁΩÆÈªòË™çÁöÑÊó•ÊúüÊ†ºÂºè
      if (component.get('tagName').toLowerCase() === 'input' && 
          component.getAttributes().type === 'date') {
        const currentFormat = component.getAttributes()['data-date-format'];
        if (!currentFormat) {
          console.log('üìÖ ÁÇ∫Êñ∞Ê∑ªÂä†ÁöÑÊó•ÊúüËº∏ÂÖ•Ê°ÜË®≠ÁΩÆÈªòË™çÊ†ºÂºè');
          component.setAttributes({ 'data-date-format': 'YYYY-MM-DD' });
        }
      }
      
      // Â¶ÇÊûúÊòØ textareaÔºåÁ¢∫‰øùÂÖßÂÆπÊ≠£Á¢∫È°ØÁ§∫
      if (component.get('tagName').toLowerCase() === 'textarea') {
        // ÂàùÂßãÂåñ editFormData
        console.log('üîß Êñ∞Ê∑ªÂä†ÁöÑ textarea ÁµÑ‰ª∂ÔºåÂàùÂßãÂåñ editFormData');
        initializeFormData(component);
        
        const content = component.get('content');
        const el = component.getEl();
        
        // Âç≥‰ΩøÊ≤íÊúâÂÖßÂÆπ‰πüË¶ÅÂêåÊ≠•ÔºåÁ¢∫‰øù DOM ÂíåÁµÑ‰ª∂ÁãÄÊÖã‰∏ÄËá¥
        if (el) {
          console.log('üîÑ Êñ∞Ê∑ªÂä†ÁöÑ textarea ÁµÑ‰ª∂ÔºåÂêåÊ≠•ÂÖßÂÆπ:', {
            componentContent: content,
            domContent: el.textContent
          });
          
          // Â¶ÇÊûúÂÖßÂÆπ‰∏ç‰∏ÄËá¥ÔºåÂº∑Âà∂ÂêåÊ≠•
          if (content !== el.textContent) {
            el.textContent = content || '';
            console.log('‚úÖ textarea DOM ÂÖßÂÆπÂ∑≤ÂêåÊ≠•:', content || '');
            
            // ÂêåÊôÇÊõ¥Êñ∞ editFormData ‰ª•‰øùÊåÅ‰∏ÄËá¥ÊÄß
            const currentEditFormData = component.get('editFormData') || {};
            currentEditFormData.defaultValue = content || '';
            currentEditFormData.value = content || '';
            component.set('editFormData', currentEditFormData);
            console.log('‚úÖ textarea editFormData Â∑≤ÂêåÊ≠•:', currentEditFormData);
          }
          

          

        }
      }
      
      // ÁÇ∫Êñ∞Ê∑ªÂä†ÁöÑÁµÑ‰ª∂Ê∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞Â∑•ÂÖ∑Ê¨Ñ
      setTimeout(() => {
        // Âú®Âª∂ÈÅ≤ÂæåÂÜçÊ¨°Ê™¢Êü•ÁµÑ‰ª∂ÊòØÂê¶‰ªçÁÑ∂ÊúâÊïà
        if (component && component.get && typeof component.get === 'function') {
          addEditButtonToToolbar(component);
        } else {
          console.warn('‚ö†Ô∏è component:add setTimeout: ÁµÑ‰ª∂Âú®Âª∂ÈÅ≤ÊúüÈñìËÆäÁÇ∫ÁÑ°Êïà');
        }
      }, 100); // Á®çÂæÆÂª∂ÈÅ≤Á¢∫‰øùÁµÑ‰ª∂ÂÆåÂÖ®ÂàùÂßãÂåñ
    } catch (error) {
      console.error('‚ùå component:add ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });

    // Áõ£ËÅΩÁµÑ‰ª∂Êõ¥Êñ∞‰∫ã‰ª∂
  editor.on('component:update', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:update: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      console.log(' ÁµÑ‰ª∂Ë¢´Êõ¥Êñ∞:', component.get('tagName'), component.getId());
      
      // Á¢∫‰øùÁ∑®ËºØÊåâÈàï‰ªçÁÑ∂Â≠òÂú®ÊñºÂ∑•ÂÖ∑Ê¨Ñ
      const toolbar = component.get('toolbar');
      if (toolbar && !toolbar.some(item => item.command === 'edit-component')) {
        addEditButtonToToolbar(component);
      }
      
      // Â¶ÇÊûúÊòØÊó•ÊúüËº∏ÂÖ•Ê°ÜÔºåÊõ¥Êñ∞Ê†ºÂºèÈ°ØÁ§∫
      if (component.get('tagName').toLowerCase() === 'input' && 
          component.getAttributes().type === 'date') {
        const dateFormat = component.getAttributes()['data-date-format'] || 'YYYY-MM-DD';
        console.log('üìÖ Êó•ÊúüËº∏ÂÖ•Ê°ÜÊ†ºÂºèÂ∑≤Êõ¥Êñ∞:', dateFormat);
      }
      
      // Â¶ÇÊûúÊòØ textareaÔºåÂè™Âú®ÂøÖË¶ÅÊôÇÂêåÊ≠•ÂÖßÂÆπÔºåÈÅøÂÖçÁÑ°ÈôêÂæ™Áí∞
      if (component.get('tagName').toLowerCase() === 'textarea') {
        const content = component.get('content');
        const el = component.getEl();
        if (el && content !== undefined && content !== null) {
          // Âè™Âú® DOM ÂÖßÂÆπÁÇ∫Á©∫‰∏îÁµÑ‰ª∂ÂÖßÂÆπ‰∏çÁÇ∫Á©∫ÊôÇÊâçÂêåÊ≠•
          if (el.textContent === '' && content !== '') {
            console.log('üîÑ textarea ÂÖßÂÆπÁÇ∫Á©∫ÔºåÂêåÊ≠•ÁµÑ‰ª∂ÂÖßÂÆπÂà∞ DOM:', content);
            el.textContent = content;
          }
        }
      }
      
      // ÁßªÈô§Ëá™ÂãïÂà∑Êñ∞ÔºåÈÅøÂÖçÁÑ°ÈôêÂæ™Áí∞
      // setTimeout(() => {
      //   if (editor && !editor.isDestroyed && editor.refresh) {
      //     editor.refresh();
      //   }
      // }, 50);
    } catch (error) {
      console.error('‚ùå component:update ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });

  // Áõ£ËÅΩÁ∑®ËºØÂëΩ‰ª§ - Á∞°ÂåñÁÇ∫Âè™Ëß∏Áôº‰∫ã‰ª∂
  editor.Commands.add('edit-component', {
    run: function(editor, sender, options) {
      console.log('üîß Á∑®ËºØÂëΩ‰ª§Ë¢´Ëß∏Áôº');
      console.log(' ÁôºÈÄÅËÄÖ:', sender);
      console.log(' ÈÅ∏È†Ö:', options);
      
      const component = options.component || editor.getSelected();
      
      // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•ÔºåÁ¢∫‰øùÁµÑ‰ª∂Â≠òÂú®‰∏îÊúâÊïà
      if (!component) {
        console.warn('‚ö†Ô∏è Ê≤íÊúâÈÅ∏‰∏≠ÁöÑÁµÑ‰ª∂ÔºåÁÑ°Ê≥ïÁ∑®ËºØ');
        return;
      }
      
      // Ê™¢Êü•ÁµÑ‰ª∂ÊòØÂê¶‰ªçÁÑ∂ÊúâÊïà
      if (!component.get || typeof component.get !== 'function') {
        console.warn('‚ö†Ô∏è ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄÔºåÁÑ°Ê≥ïÁ∑®ËºØ');
        return;
      }
      
      try {
        const tagName = component.get('tagName');
        const componentId = component.getId();
        
        if (!tagName) {
          console.warn('‚ö†Ô∏è ÁµÑ‰ª∂Ê®ôÁ±§ÂêçÁ®±ÁÑ°ÊïàÔºåÁÑ°Ê≥ïÁ∑®ËºØ');
          return;
        }
        
        console.log(' ÈñãÂßãÁ∑®ËºØÁµÑ‰ª∂:', tagName, 'ID:', componentId);
        
        // ÂàùÂßãÂåñË°®ÂñÆÊï∏Êìö‰∏¶Â≠òÂÑ≤Âà∞ÁµÑ‰ª∂
        initializeFormData(component);
        
        // Â¶ÇÊûúÊòØ textarea ÁµÑ‰ª∂ÔºåË®òÈåÑË©≥Á¥∞‰ø°ÊÅØ
        if (tagName.toLowerCase() === 'textarea') {
          const editFormData = component.get('editFormData');
          console.log('üîß textarea Á∑®ËºØÊï∏ÊìöÂàùÂßãÂåñÂÆåÊàê:', editFormData);
        }
        
        // Âè™Ëß∏ÁôºËá™ÂÆöÁæ©‰∫ã‰ª∂‰æõ EFormDesigner Áõ£ËÅΩÔºå‰∏çÂâµÂª∫ modal
        editor.trigger('edit-component-requested', component);
      } catch (error) {
        console.error('‚ùå Á∑®ËºØÁµÑ‰ª∂ÊôÇÁôºÁîüÈåØË™§:', error);
        console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
          hasGet: !!component.get,
          getType: typeof component.get,
          component: component
        });
      }
    }
  });

  // Ê∑ªÂä†Êó•ÊúüÊ†ºÂºèÊõ¥Êñ∞ÂëΩ‰ª§
  editor.Commands.add('update-date-format', {
    run: function(editor, sender, options) {
      const { component, newFormat } = options;
      
      // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
      if (!component || !component.get || typeof component.get !== 'function') {
        console.warn('‚ö†Ô∏è update-date-format: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
        return;
      }
      
      if (!newFormat) {
        console.warn('‚ö†Ô∏è update-date-format: Êñ∞Ê†ºÂºèÊú™Êèê‰æõ');
        return;
      }
      
      try {
        console.log('üìÖ Êõ¥Êñ∞Êó•ÊúüÊ†ºÂºè:', newFormat);
        component.setAttributes({ 'data-date-format': newFormat });
        
        // Ëß∏ÁôºËá™ÂÆöÁæ©‰∫ã‰ª∂
        editor.trigger('date-format-updated', { component, format: newFormat });
      } catch (error) {
        console.error('‚ùå update-date-format ÂëΩ‰ª§Âü∑Ë°åÈåØË™§:', error);
        console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
          hasGet: !!component.get,
          getType: typeof component.get,
          component: component
        });
      }
    }
  });

  // ÁÇ∫ÊâÄÊúâÁèæÊúâÁµÑ‰ª∂Ê∑ªÂä†Á∑®ËºØÊåâÈàïÂà∞Â∑•ÂÖ∑Ê¨Ñ
  setTimeout(() => {
    try {
      // Ê™¢Êü•Á∑®ËºØÂô®ÊòØÂê¶‰ªçÁÑ∂ÊúâÊïà
      if (editor && typeof editor.DomComponents === 'object') {
        addEditButtonsToAllComponentsToolbar();
      } else {
        console.warn('‚ö†Ô∏è Á∑®ËºØÂô®Âú®Âª∂ÈÅ≤ÊúüÈñìËÆäÁÇ∫ÁÑ°ÊïàÔºåË∑≥ÈÅéÊ∑ªÂä†Á∑®ËºØÊåâÈàï');
      }
    } catch (error) {
      console.error('‚ùå Âª∂ÈÅ≤Ê∑ªÂä†Á∑®ËºØÊåâÈàïÊôÇÁôºÁîüÈåØË™§:', error);
    }
  }, 500); // Âª∂ÈÅ≤Á¢∫‰øùÁ∑®ËºØÂô®ÂÆåÂÖ®ÂàùÂßãÂåñ
  
  console.log('‚úÖ Á∑®ËºØÂäüËÉΩÂ∑≤Ë®≠ÁΩÆÔºàÂÉÖÂè≥ÂÅ¥Èù¢ÊùøÔºåÁÑ° modalÔºâ');

  // Âú® addEditFunctionality ÂáΩÊï∏‰∏≠Ê∑ªÂä†Â∞ç change:content ‰∫ã‰ª∂ÁöÑÁõ£ËÅΩ
  editor.on('component:change:content', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:change:content: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const tagName = component.get('tagName');
      const componentId = component.getId();
      console.log(' ÁµÑ‰ª∂ÂÖßÂÆπËÆäÂåñ:', tagName, componentId);
      
      // Â¶ÇÊûúÊòØ textarea ÁµÑ‰ª∂ÔºåÁ¢∫‰øù DOM ÂêåÊ≠•
      if (tagName.toLowerCase() === 'textarea') {
        // ‰øÆÂæ©ÔºöÂæûÁµÑ‰ª∂Áç≤Âèñ content ÂÄº
        const content = component.get('content');
        const el = component.getEl();
        if (el) {
          console.log('üîÑ textarea ÂÖßÂÆπËÆäÂåñÔºåÂêåÊ≠• DOM:', {
            componentContent: content,
            domContent: el.textContent
          });
          
          // Â¶ÇÊûú DOM ÂÖßÂÆπËàáÁµÑ‰ª∂ÂÖßÂÆπ‰∏ç‰∏ÄËá¥ÔºåÂº∑Âà∂ÂêåÊ≠•
          if (content !== el.textContent) {
            el.textContent = content || '';
            console.log('‚úÖ textarea DOM ÂÖßÂÆπÂ∑≤ÂêåÊ≠•:', content || '');
          }
          
          // Âº∑Âà∂Ëß∏Áôº DOM Êõ¥Êñ∞‰∫ã‰ª∂
          try {
            const event = new Event('input', { bubbles: true });
            el.dispatchEvent(event);
            console.log('‚úÖ textarea DOM input ‰∫ã‰ª∂Â∑≤Ëß∏Áôº');
          } catch (eventError) {
            console.warn('‚ö†Ô∏è Ëß∏Áôº DOM ‰∫ã‰ª∂ÊôÇÂá∫ÈåØ:', eventError);
          }
        }
        
        // Âº∑Âà∂Êõ¥Êñ∞ÁµÑ‰ª∂ÁöÑ innerHTML Âíå textContent Â±¨ÊÄß
        try {
          // ‰øÆÂæ©Ôºö‰ΩøÁî®ÂæûÁµÑ‰ª∂Áç≤ÂèñÁöÑ content ÂÄº
          component.set('innerHTML', content || '');
          component.set('textContent', content || '');
          console.log('‚úÖ textarea ÁµÑ‰ª∂ innerHTML Âíå textContent Â∑≤Âº∑Âà∂Êõ¥Êñ∞');
        } catch (setError) {
          console.warn('‚ö†Ô∏è Âº∑Âà∂Êõ¥Êñ∞ innerHTML/textContent ÊôÇÂá∫ÈåØ:', setError);
        }
      }
      
      // Ëß∏ÁôºÁ∑®ËºØÂô®Êõ¥Êñ∞‰ª•Á¢∫‰øù HTML ‰ª£Á¢ºÂêåÊ≠•
      setTimeout(() => {
        if (editor && !editor.isDestroyed && editor.refresh) {
          editor.refresh();
          console.log('‚úÖ Á∑®ËºØÂô®Â∑≤Âà∑Êñ∞ÔºåHTML ‰ª£Á¢ºÂ∑≤ÂêåÊ≠•');
        }
      }, 50);
    } catch (error) {
      console.error('‚ùå component:change:content ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
    }
  });

  // Ê∑ªÂä†Â∞çÁµÑ‰ª∂Â±¨ÊÄßËÆäÂåñÁöÑÁõ£ËÅΩ
  editor.on('component:change:attributes', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è component:change:attributes: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const tagName = component.get('tagName');
      if (tagName.toLowerCase() === 'textarea') {
        console.log(' textarea Â±¨ÊÄßËÆäÂåñÔºåÂº∑Âà∂Êõ¥Êñ∞ÂÖßÂÆπ');
        
        // Âº∑Âà∂Ëß∏ÁôºÂÖßÂÆπÊõ¥Êñ∞
        const content = component.get('content');
        if (content) {
          component.trigger('change:content');
          console.log('‚úÖ textarea ÂÖßÂÆπÊõ¥Êñ∞‰∫ã‰ª∂Â∑≤Ëß∏Áôº');
        }
      }
    } catch (error) {
      console.error('‚ùå component:change:attributes ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
    }
  });

  // ÁßªÈô§ÈáçË§áÁöÑ component:update Áõ£ËÅΩÂô®ÔºåÈÅøÂÖçÁÑ°ÈôêÂæ™Áí∞
  // ÈÄôÂÄãÁõ£ËÅΩÂô®ÊúÉÂ∞éËá¥ textarea ÂÖßÂÆπË¢´‰∏çÊñ∑ÈáçÁΩÆ
  // Â∑≤Á∂ìÂú®Á¨¨‰∏ÄÂÄãÁõ£ËÅΩÂô®‰∏≠ËôïÁêÜ‰∫Ü textarea ÁöÑÂÖßÂÆπÂêåÊ≠•
};

// Ê∑ªÂä†ÂèñÊ∂àÈÅ∏‰∏≠ÂäüËÉΩ
const addDeselectFunctionality = (editor) => {
  // Áõ£ËÅΩÁµÑ‰ª∂ÈÅ∏‰∏≠‰∫ã‰ª∂
  editor.on('component:selected', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è addDeselectFunctionality component:selected: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const el = component.getEl();
      
      // Ê™¢Êü•ÊòØÂê¶ÈÅ∏‰∏≠‰∫Ü body ÂÖÉÁ¥†
      if (el && el.tagName === 'BODY') {
        console.log('‚ö†Ô∏è Ê™¢Ê∏¨Âà∞ body Ë¢´ÈÅ∏‰∏≠ÔºåËá™ÂãïÂèñÊ∂àÈÅ∏‰∏≠');
        editor.select(null);
      }
    } catch (error) {
      console.error('‚ùå addDeselectFunctionality component:selected ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });
  
  // Ê∑ªÂä† ESC ÈçµÂèñÊ∂àÈÅ∏‰∏≠ÂäüËÉΩ
  const handleKeydown = function(e) {
    if (e.key === 'Escape') {
      console.log('üîç ESC ÈçµÂèñÊ∂àÈÅ∏‰∏≠');
      editor.select(null);
      e.preventDefault();
      e.stopPropagation();
    }
  };
  
  // Ê∑ªÂä†ÂÖ®Â±ÄÈçµÁõ§‰∫ã‰ª∂Áõ£ËÅΩÂô®
  document.addEventListener('keydown', handleKeydown);
  
  // Ê∑ªÂä†ÈªûÊìäÁ©∫ÁôΩÂçÄÂüüÂèñÊ∂àÈÅ∏‰∏≠ÂäüËÉΩ
  const handleCanvasClick = function(e) {
    // Ê™¢Êü•ÈªûÊìäÁöÑÊòØÂê¶ÊòØÁ©∫ÁôΩÂçÄÂüüÔºà‰∏çÊòØÁµÑ‰ª∂Ôºâ
    const target = e.target;
    
    // Â¶ÇÊûúÈªûÊìäÁöÑÊòØ canvas Êú¨Ë∫´Êàñ body ÂÖÉÁ¥†ÔºåÂèñÊ∂àÈÅ∏‰∏≠
    if (target.tagName === 'BODY' || target.classList.contains('gjs-cv-canvas')) {
      console.log('üîç ÈªûÊìäÁ©∫ÁôΩÂçÄÂüüÂèñÊ∂àÈÅ∏‰∏≠');
      editor.select(null);
      e.preventDefault();
      e.stopPropagation();
    }
  };
  
  // Áõ£ËÅΩÁµÑ‰ª∂ÈÅ∏‰∏≠‰∫ã‰ª∂‰æÜË®≠ÁΩÆ canvas ÈªûÊìäÁõ£ËÅΩÂô®
  editor.on('component:selected', function(component) {
    // Ê∑ªÂä†ÂÆâÂÖ®Ê™¢Êü•
    if (!component || !component.get || typeof component.get !== 'function') {
      console.warn('‚ö†Ô∏è addDeselectFunctionality canvas setup component:selected: ÁµÑ‰ª∂ÁÑ°ÊïàÊàñÂ∑≤Ë¢´Èä∑ÊØÄ');
      return;
    }
    
    try {
      const canvas = editor.Canvas.getFrameEl();
      if (canvas) {
        canvas.addEventListener('click', handleCanvasClick);
      }
    } catch (error) {
      console.error('‚ùå addDeselectFunctionality canvas setup component:selected ‰∫ã‰ª∂ËôïÁêÜÈåØË™§:', error);
      console.error('‚ùå ÁµÑ‰ª∂ÁãÄÊÖã:', {
        hasGet: !!component.get,
        getType: typeof component.get,
        component: component
      });
    }
  });
  
  // Ê∑ªÂä†ÂèñÊ∂àÈÅ∏‰∏≠ÂëΩ‰ª§
  editor.Commands.add('deselect', {
    run: function(editor, sender, options) {
      console.log('üîç Âü∑Ë°åÂèñÊ∂àÈÅ∏‰∏≠ÂëΩ‰ª§');
      editor.select(null);
    }
  });
  
  // ËøîÂõûÊ∏ÖÁêÜÂáΩÊï∏
  return () => {
    document.removeEventListener('keydown', handleKeydown);
  };
};

export default useGrapesJS; 